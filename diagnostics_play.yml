---
- name: run OVN diagnostics
  gather_facts: no
  hosts: all
  vars:
    diagnostics:
      ovn_controller:
        - name: ovn-remote-probe-interval
          command: ovs-vsctl get open . external_ids:ovn-remote-probe-interval
        - name: ovn-openflow-probe-interval
          command: ovs-vsctl get open . external_ids:ovn-openflow-probe-interval
        - name: ovn-monitor-all
          command: ovs-vsctl get open . external_ids:ovn-monitor-all
      ovn_dbs:
        - name: nb-inactivity-probe
          command: podman exec $(podman ps -qf name=ovn-dbs-bundle) ovn-nbctl get connection . inactivity_probe
        - name: sb-inactivity-probe
          command: podman exec $(podman ps -qf name=ovn-dbs-bundle) ovn-sbctl get connection . inactivity_probe
        - name: datapath-grouping
          command: podman exec $(podman ps -qf name=ovn-dbs-bundle) ovn-nbctl get nb_global . options:use_logical_dp_groups
      neutron_api:
        - name: neutron-server-workers
          command: podman exec $(podman ps -qf name=neutron_api) grep workers /etc/neutron/neutron.conf
        - name: neutron-server-ovsdb-timeout
          command: podman exec $(podman ps -qf name=neutron_api) grep ovsdb_connection_timeout /etc/neutron/plugins/ml2/ml2_conf.ini
      ovn_metadata:
        - name: neutron-metadata-workers
          command: podman exec $(podman ps -qf name=ovn_metadata_agent) grep workers /etc/neutron/plugins/networking-ovn/networking-ovn-metadata-agent.ini
  tasks:
    - name: run diagnostics on host group
      include_tasks: diagnostic_host.yml
      with_dict: "{{ diagnostics }}"
      when: inventory_hostname in groups[item.key]

    - name: "store results from {{ inventory_hostname }}"
      set_fact:
        diagnostic_results: "{{ diagnostics_results | default({}) | combine({inventory_hostname: node_results | default({})}) }}"


- name: print results
  gather_facts: no
  hosts: ovn_controller, ovn_dbs
  tasks:
    - debug:
        var: diagnostic_results

